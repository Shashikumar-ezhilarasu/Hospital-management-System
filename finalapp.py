#!/usr/bin/env python3
import os
import psycopg2
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Gemini API key setup
genai.configure(api_key=os.getenv("GOOGLE_API_KEY", ""))

# Connect to PostgreSQL
try:
    conn = psycopg2.connect(
        host="localhost",
        database="testing2",
        user="postgres",
        password="pass"
    )
    print("✅ Connected to the database.")
except Exception as e:
    print(f"❌ Connection failed: {e}")
    exit(1)

def fetch_schema():
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT table_name
                FROM information_schema.tables
                WHERE table_schema = 'public'
            """)
            tables = [row[0] for row in cur.fetchall()]
            schema_lines = []
            for table in tables:
                cur.execute(f"""
                    SELECT column_name, data_type
                    FROM information_schema.columns
                    WHERE table_name = '{table}'
                """)
                columns = cur.fetchall()
                schema_lines.append(f"{table} (")
                for col, dtype in columns:
                    schema_lines.append(f"    {col} ({dtype})")
                schema_lines.append(")")
                schema_lines.append("")
            print("✅ Schema fetched.")
            return "\n".join(schema_lines)
    except Exception as e:
        print(f"❌ Error fetching schema: {e}")
        return ""

def generate_sql(nl_query, schema):
    prompt = f"""
You are an expert PostgreSQL query generator.

Here is the schema:
{schema}

Convert this natural language question to a valid SQL query:
\"{nl_query}\"

Only return the SQL query. No explanations, markdown, or extra output.
"""
    model = genai.GenerativeModel("gemini-1.5-flash")
    try:
        response = model.generate_content(prompt)
        sql = response.text.strip().replace("```sql", "").replace("```", "")
        print("✅ SQL query generated by Gemini.")
        return sql
    except Exception as e:
        print(f"❌ Gemini Error: {e}")
        return None

def run_sql(sql):
    if not sql:
        return
    try:
        with conn.cursor() as cur:
            cur.execute(sql)
            if cur.description:
                columns = [desc[0] for desc in cur.description]
                rows = cur.fetchall()
                print("\n📊 Results:")
                print(" | ".join(columns))
                print("-" * 50)
                for row in rows:
                    print(" | ".join(str(col) for col in row))
                print(f"\n✅ {len(rows)} rows returned.")
            else:
                conn.commit()
                print("✅ Query executed successfully.")
    except Exception as e:
        print(f"❌ SQL Execution Error: {e}")
        conn.rollback()

def main():
    print("🩺 Hospital Management CLI (Type 'exit' to quit)\n")
    schema = fetch_schema()
    if not schema:
        print("❌ Schema not available. Exiting.")
        return

    while True:
        try:
            question = input("❓> ").strip()
            if question.lower() in ['exit', 'quit']:
                break
            if not question:
                continue
            sql = generate_sql(question, schema)
            print(f"\n🧠 Gemini SQL:\n{sql}")
            run_sql(sql)
        except KeyboardInterrupt:
            break

    conn.close()
    print("👋 Goodbye. Connection closed.")

if __name__ == "__main__":
    main()
